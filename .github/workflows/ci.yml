---
name: CI

on:
  pull_request:
  push:
  workflow_dispatch:
    inputs:
      release-version:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-version
        description: >-
          Target Semver-compliant version to release.
          Please, don't prepend `v`.
        required: true
      release-commitish:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-commitish
        default: ''
        description: >-
          The commit to be released to Npmjs and tagged
          in Git as `release-version`. Normally, you
          should keep this empty.
      YOLO:
        default: false
        description: >-
          Flag whether test results should block the
          release (true/false). Only use this under
          extraordinary circumstances to ignore the
          test failures and cut the release regardless.

jobs:

  pre-setup:
    name: Pre-set global build settings
    runs-on: Ubuntu-latest
    defaults:
      run:
        shell: python
    outputs:
      dist-version: >-
        ${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-version
        }}
      is_untagged_devel: >-
        ${{ steps.not_tagged_check.outputs.is_untagged_devel || false }}
      release-requested: >-
        ${{
            steps.request-check.outputs.release-requested || false
        }}
      git-tag: ${{ steps.git-tag.outputs.tag }}
      tarball-artifact-name: ${{ steps.artifact-name.outputs.filename }}
      version-patch-name: ${{ steps.patch-name.outputs.filename }}
    steps:
    - name: Switch to using Python 3.10 by default
      uses: actions/setup-python@v2.2.2
      with:
        python-version: '3.10'
    - name: >-
        Mark the build as untagged '${{
            github.event.repository.default_branch
        }}' branch build
      id: untagged-check
      if: >-
        github.event_name == 'push' &&
        github.ref == format(
          'refs/heads/{0}', github.event.repository.default_branch
        )
      run: >-
        print('::set-output name=is-untagged-devel::true')
    - name: Mark the build as "release request"
      id: request-check
      if: github.event_name == 'workflow_dispatch'
      run: >-
        print('::set-output name=release-requested::true')
    - name: Check out src from Git
      if: >-
        steps.request-check.outputs.release-requested != 'true'
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0  # To have all the tags
        ref: ${{ github.event.inputs.release-commitish }}
    - name: Drop Git tags from HEAD for non-tag-create events
      if: >-
        steps.request-check.outputs.release-requested != 'true'
      run: >-
        git tag --points-at HEAD
        |
        xargs git tag --delete
      shell: bash
    - name: Set up versioning prerequisites
      if: >-
        steps.request-check.outputs.release-requested != 'true'
      run: >-
        python -m
        pip install
        --user
        setuptools-scm
      shell: bash
    - name: Set the current dist version
      if: steps.request-check.outputs.release-requested != 'true'
      id: scm-version
      run: |
        import setuptools_scm
        ver = setuptools_scm.get_version(
          ${{
              steps.untagged-check.outputs.is-untagged-devel == 'true'
              && 'local_scheme="no-local-version"' || ''
          }}
        )
        print(f'::set-output name=dist_version::{ver}')
    - name: Set the target Git tag
      id: git-tag
      run: >-
        print('::set-output name=tag::v${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-version
        }}')
    - name: Set the expected tarball artifact name
      id: artifact-name
      run: |
        print('::set-output name=filename::ansible-ansible-language-server-${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-version
        }}.tgz')
    - name: Set the expected version patch filename
      id: patch-name
      run: |
        print('::set-output name=filename::0001-Release-${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-version
        }}-from-GitHub-Actions-CI-CD.patch')

  lint:
    runs-on: Ubuntu-latest
    steps:
    - name: Fetch the src
      uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v2
    - name: Install dependencies
      run: |
        pip3 install -r test-requirements.txt
        npm ci
    - name: npm run lint
      run: npm run lint

  build:
    name: Build
    needs:
    - pre-setup  # transitive, for accessing settings

    runs-on: Ubuntu-latest

    steps:
    - name: Fetch the src
      uses: actions/checkout@v2
    - name: >-
        Set up NodeJS ${{ matrix.node-version }}
        with the global NPM registry
      uses: actions/setup-node@v2


    - name: >-
        Bump the package version to ${{
          needs.pre-setup.outputs.dist-version
        }}
      run: >-
        npm version '${{ needs.pre-setup.outputs.dist-version }}'
        -m 'Release %s from GitHub Actions CI/CD'

    - name: Save the package tarball as a GHA artifact
      uses: actions/upload-artifact@v2
      with:
        name: npm-package-bump-patch
        path: ${{ needs.pre-setup.outputs.version-patch-name }}

    - name: Build a package tarball artifact
      run: npm pack

    - name: Save the package tarball as a GHA artifact
      uses: actions/upload-artifact@v2
      with:
        name: npm-package-tarball
        path: ${{ needs.pre-setup.outputs.tarball-artifact-name }}

  test:
    needs:
    - build
    - pre-setup  # transitive, for accessing settings

    runs-on: ${{ matrix.os }}-latest

    strategy:
      matrix:
        experimental:
        - false
        node-version:
        - 16.x
        - 14.x
        - 12.x
        os:
        - Ubuntu
        - macOS
        include:
        - experimental: true
          node-version: 16
          os: Windows
        - experimental: true
          node-version: 12
          os: Windows

    continue-on-error: >-
      ${{
          (
            (
              needs.pre-setup.outputs.release-requested == 'true' &&
              !toJSON(github.event.inputs.YOLO)
            ) ||
            matrix.experimental
          ) && true || false
      }}

    steps:
    - name: Fetch the GHA artifact with the package tarball
      uses: actions/download-artifact@v2
      with:
        name: npm-package-tarball
    - name: >-
        Set up NodeJS ${{ matrix.node-version }}
        with the global NPM registry
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: https://registry.npmjs.org
    - name: >-
        Install the `${{
          needs.pre-setup.outputs.tarball-artifact-name
        }}` package
      run: npm install -g ${{ needs.pre-setup.outputs.tarball-artifact-name }}
      shell: bash
    - name: Uninstall the `@ansible/ansible-language-server` package
      run: npm uninstall -g @ansible/ansible-language-server
      shell: bash

    - name: Clean up the checkout
      run: rm -rfv *
      shell: bash

    - name: Fetch the src snapshot
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Fetch the GHA artifact with the version patch
      uses: actions/download-artifact@v2
      with:
        name: npm-package-bump-patch

    - name: Apply the version patch
      run: git am ${{ needs.pre-setup.outputs.version-patch-name }}
    - name: Drop the version patch file
      run: rm -fv ${{ needs.pre-setup.outputs.version-patch-name }}

    - name: Populate the test dependencies
      run: npm ci
    - name: Run testing against the Git checkout
      run: npm test

  publish:
    environment: release
    needs:
    - pre-setup  # transitive, for accessing settings
    - test

    runs-on: Ubuntu-latest

    strategy:
      matrix:
        node-version:
        - 16.x

    steps:
    - name: Fetch the GHA artifact with the package tarball
      uses: actions/download-artifact@v2
      with:
        name: npm-package-tarball

    - name: >-
        Set up NodeJS ${{ matrix.node-version }}
        with the global NPM registry
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: https://registry.npmjs.org
    - name: >-
        Publish the prebuilt and tested package
        `${{ needs.pre-setup.outputs.tarball-artifact-name }}`
        to public NPM Registry
      run: npm publish ${{ needs.pre-setup.outputs.tarball-artifact-name }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: >-
        Set up NodeJS ${{ matrix.node-version }}
        with the GitHub Packages NPM registry
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: https://npm.pkg.github.com
    - name: >-
        Publish the prebuilt and tested package
        `${{ needs.pre-setup.outputs.tarball-artifact-name }}`
        to GitHub Packages NPM Registry
      run: npm publish ${{ needs.pre-setup.outputs.tarball-artifact-name }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
...
